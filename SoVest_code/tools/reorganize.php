<?php
/**
 * Directory Reorganization Script for SoVest
 * 
 * This script creates the new directory structure, generates placeholder files,
 * and provides commands for moving files to their new locations.
 * 
 * Usage: php tools/reorganize.php
 */

// Define base path (SoVest_code directory)
$basePath = dirname(__DIR__);

// Define directories to create
$directories = [
    'app/Console',
    'app/Controllers',
    'app/Exceptions',
    'app/Middleware',
    'app/Models/Traits',
    'app/Services/Interfaces',
    'app/Handlers',
    'app/Helpers',
    'bootstrap/cache',
    'config',
    'database',
    'public',
    'resources/views/layouts',
    'resources/views/partials',
    'resources/views/pages',
    'routes',
    'storage/app',
    'storage/logs',
    'storage/cache',
    'tests/Feature',
    'tests/Unit'
];

// Define directory descriptions for README files
$directoryDescriptions = [
    'app' => 'Contains the core application code.',
    'app/Console' => 'Contains console commands for the application.',
    'app/Controllers' => 'Contains controller classes that handle HTTP requests.',
    'app/Exceptions' => 'Contains exception handlers and custom exceptions.',
    'app/Middleware' => 'Contains middleware classes for processing HTTP requests.',
    'app/Models' => 'Contains model classes for database interaction.',
    'app/Models/Traits' => 'Contains traits used by models for shared functionality.',
    'app/Services' => 'Contains service classes that implement business logic.',
    'app/Services/Interfaces' => 'Contains interfaces for service classes.',
    'app/Handlers' => 'Contains handler classes for various events and processes.',
    'app/Helpers' => 'Contains helper functions and utility classes.',
    'bootstrap' => 'Contains files that bootstrap the application.',
    'bootstrap/cache' => 'Contains cached configuration and route files.',
    'config' => 'Contains configuration files.',
    'database' => 'Contains database migration and seed files.',
    'public' => 'The public directory containing the entry point to the application.',
    'resources' => 'Contains non-PHP resources like views, assets, etc.',
    'resources/views' => 'Contains view templates.',
    'resources/views/layouts' => 'Contains layout templates used by views.',
    'resources/views/partials' => 'Contains partial templates used by views.',
    'resources/views/pages' => 'Contains page-specific view templates.',
    'routes' => 'Contains route definition files.',
    'storage' => 'Contains application storage files.',
    'storage/app' => 'Contains files generated by the application.',
    'storage/logs' => 'Contains log files.',
    'storage/cache' => 'Contains cached files.',
    'tests' => 'Contains test files.',
    'tests/Feature' => 'Contains feature tests.',
    'tests/Unit' => 'Contains unit tests.'
];

// Function to create directories
function createDirectories($basePath, $directories) {
    $createdDirectories = [];
    
    foreach ($directories as $directory) {
        $path = "$basePath/$directory";
        
        if (!file_exists($path)) {
            if (mkdir($path, 0755, true)) {
                $createdDirectories[] = $directory;
                echo "Created directory: $directory\n";
            } else {
                echo "Failed to create directory: $directory\n";
            }
        } else {
            echo "Directory already exists: $directory\n";
        }
    }
    
    return $createdDirectories;
}

// Function to create README.md files
function createReadmeFiles($basePath, $directories, $descriptions) {
    $createdReadmes = [];
    
    // Add root directories that might not be in the directories list
    $allDirs = array_merge($directories, array_keys($descriptions));
    $allDirs = array_unique($allDirs);
    
    foreach ($allDirs as $directory) {
        $path = "$basePath/$directory";
        
        if (file_exists($path) && is_dir($path) && isset($descriptions[$directory])) {
            $readmePath = "$path/README.md";
            
            if (!file_exists($readmePath)) {
                $content = "# " . ucfirst(basename($directory)) . " Directory\n\n";
                $content .= $descriptions[$directory] . "\n";
                
                if (file_put_contents($readmePath, $content)) {
                    $createdReadmes[] = "$directory/README.md";
                    echo "Created README: $directory/README.md\n";
                } else {
                    echo "Failed to create README: $directory/README.md\n";
                }
            } else {
                echo "README already exists: $directory/README.md\n";
            }
        }
    }
    
    return $createdReadmes;
}

// Function to generate move commands
function generateMoveCommands($basePath) {
    $commands = [];
    
    // Define file mappings (source directory => destination directory)
    $directoryMappings = [
        // Controllers
        'app/Controllers' => 'app/Controllers',
        // Middleware
        'app/Middleware' => 'app/Middleware',
        // Models
        'database/models' => 'app/Models',
        'database/models/traits' => 'app/Models/Traits',
        // Services
        'services' => 'app/Services',
        'app/Services/Interfaces' => 'app/Services/Interfaces',
        // Handlers
        'app/Handlers' => 'app/Handlers',
        // Helpers
        'app/Helpers' => 'app/Helpers',
        // Views
        'app/Views/layouts' => 'resources/views/layouts',
        'app/Views/error' => 'resources/views/pages/error',
        'app/Views/page' => 'resources/views/pages',
        'app/Views/prediction' => 'resources/views/pages/prediction',
        'app/Views/user' => 'resources/views/pages/user',
        // Routes
        'app/Routes' => 'routes',
        // Public
        'public' => 'public',
        // Bootstrap
        'bootstrap' => 'bootstrap',
        // Config
        'config' => 'config',
        // Database migrations
        'database/migrations' => 'database/migrations',
        // Tests
        'tests/Unit' => 'tests/Unit'
    ];
    
    // Generate commands for directory mappings
    foreach ($directoryMappings as $source => $destination) {
        $sourcePath = "$basePath/$source";
        
        if (file_exists($sourcePath) && is_dir($sourcePath)) {
            $commands[] = "# Move files from $source to $destination";
            $commands[] = "mkdir -p $basePath/$destination";
            $commands[] = "cp -r $sourcePath/* $basePath/$destination/";
            $commands[] = "";
        }
    }
    
    // Also include commands for specific files
    $specificFileMappings = [
        'index.php' => 'public/index.php',
        'app/bootstrap.php' => 'bootstrap/app.php'
    ];
    
    foreach ($specificFileMappings as $source => $destination) {
        if (file_exists("$basePath/$source")) {
            $commands[] = "# Move specific file $source to $destination";
            $commands[] = "mkdir -p $(dirname $basePath/$destination)";
            $commands[] = "cp $basePath/$source $basePath/$destination";
            $commands[] = "";
        }
    }
    
    return $commands;
}

// Function to output migration plan
function outputMigrationPlan($createdDirectories, $createdReadmes, $moveCommands) {
    echo "\n=== SoVest Directory Reorganization Plan ===\n\n";
    
    echo "Step 1: Create New Directory Structure\n";
    echo "-------------------------------------\n";
    if ($createdDirectories) {
        echo "The following directories have been created:\n";
        foreach ($createdDirectories as $dir) {
            echo "- $dir\n";
        }
    } else {
        echo "All directories already exist. No new directories created.\n";
    }
    echo "\n";
    
    echo "Step 2: Create README Files\n";
    echo "-------------------------\n";
    if ($createdReadmes) {
        echo "The following README files have been created:\n";
        foreach ($createdReadmes as $readme) {
            echo "- $readme\n";
        }
    } else {
        echo "All README files already exist. No new README files created.\n";
    }
    echo "\n";
    
    echo "Step 3: File Migration Commands\n";
    echo "-----------------------------\n";
    echo "Execute the following commands to move files to their new locations:\n\n";
    
    if ($moveCommands) {
        foreach ($moveCommands as $command) {
            echo "$command\n";
        }
    } else {
        echo "No files to move.\n";
    }
    
    echo "\nStep 4: Update Includes and Namespaces\n";
    echo "-----------------------------------\n";
    echo "After moving files, you'll need to update includes, requires, and namespaces in the code.\n";
    echo "This should be done carefully and incrementally, with testing after each change.\n";
    
    echo "\nStep 5: Test the Application\n";
    echo "-------------------------\n";
    echo "After completing the migration, thoroughly test the application to ensure everything works correctly.\n";
}

// Main execution
echo "Starting SoVest directory reorganization...\n\n";

// Create directories
$createdDirectories = createDirectories($basePath, $directories);

// Create README files
$createdReadmes = createReadmeFiles($basePath, $directories, $directoryDescriptions);

// Generate move commands
$moveCommands = generateMoveCommands($basePath);

// Output migration plan
outputMigrationPlan($createdDirectories, $createdReadmes, $moveCommands);

echo "\nReorganization script completed.\n";